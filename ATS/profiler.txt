Timer unit: 1e-06 s

Total time: 58.1501 s
File: /mnt/raid61/Personal_data/zhangyiming/code/afe/ATS/ats/core.py
Function: entropy at line 167

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   167                                               @classmethod
   168                                               @profile
   169                                               def entropy(cls, mtx):
   170                                                   """ Computes entropy of label distribution. """
   171                                                   # return np.sum([__entropy__(x) for x in mtx])
   172     31228   58150090.0   1862.1    100.0          return cent.entropy(mtx)

Total time: 2.94502 s
File: /mnt/raid61/Personal_data/zhangyiming/code/afe/ATS/ats/core.py
Function: cal_z_k at line 174

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   174                                               @profile
   175                                               def cal_z_k(self, para, k, log_zmat):
   176                                                   # K = len(ws) - 1  # last component is uniform component
   177     36328      34827.0      1.0      1.2          ws = para.ws
   178     36328      24203.0      0.7      0.8          alpha_arr = para.alpha_arr
   179     36328      21522.0      0.6      0.7          beta_arr = para.beta_arr
   180     36328      51238.0      1.4      1.7          if k < para.K:
   181     70056     259469.0      3.7      8.8              log_zmat[:, k] = np.add(
   182     35028     145746.0      4.2      4.9                  np.log(ws[k]),
   183     35028    2373163.0     67.8     80.6                  AtsModel.normpdf(self.st_arr, alpha_arr[k], beta_arr[k])
   184                                                       )
   185                                                   else:
   186      1300      12149.0      9.3      0.4              log_zmat[:, k] = np.add(np.log(ws[k]), self.unif_log_lik)
   187     36328      22703.0      0.6      0.8          return log_zmat

Total time: 0.849011 s
File: /mnt/raid61/Personal_data/zhangyiming/code/afe/ATS/ats/core.py
Function: maximize_ws at line 197

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   197                                               @profile
   198                                               def maximize_ws(self, Z):
   199     31228     772571.0     24.7     91.0          ws = np.sum(Z, axis=0) / Z.shape[0]
   200     31228      59914.0      1.9      7.1          if ws[-1] > self.max_unif_ws:
   201                                                       ws[:-1] = (1 - self.max_unif_ws) * ws[:-1] / np.sum(ws[:-1])
   202                                                       ws[-1] = self.max_unif_ws
   203     31228      16526.0      0.5      1.9          return ws

Total time: 5.79837 s
File: /mnt/raid61/Personal_data/zhangyiming/code/afe/ATS/ats/core.py
Function: mstep at line 205

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   205                                               @profile
   206                                               def mstep(self, para, Z, k):
   207                                                   u"""
   208                                           
   209                                                   """
   210     31228      33170.0      1.1      0.6          alpha_arr = para.alpha_arr
   211     31228      25696.0      0.8      0.4          beta_arr = para.beta_arr
   212                                           
   213     31228     535315.0     17.1      9.2          tmp_sumk = np.sum(Z[:, k])
   214                                                   # avoid division by zero
   215     31228      43010.0      1.4      0.7          if tmp_sumk < 1e-8:
   216                                                       Z[:, k] += 1e-8
   217                                                       Z = AtsModel.norm_z(Z)
   218                                                       tmp_sumk = np.sum(Z[:, k])
   219                                           
   220     31228    1088151.0     34.8     18.8          para.ws = self.maximize_ws(Z)
   221                                           
   222                                                   # logger.debug(f"tmp_sumk={tmp_sumk}; k={k}; Z.shape={Z.shape}")
   223                                                   u"""
   224                                                   2020.05.06 Here, 
   225                                                   para.alpha_arr is an empry list, but try to set value by index
   226                                                   """
   227     31228    1585507.0     50.8     27.3          alpha_arr[k] = np.sum(Z[:, k] * self.st_arr) / tmp_sumk
   228                                           
   229     31228    1820824.0     58.3     31.4          tmp_beta = np.sqrt(np.sum(Z[:, k] * ((self.st_arr - alpha_arr[k]) ** 2)) / tmp_sumk)
   230                                           
   231     31228     442503.0     14.2      7.6          idx = np.searchsorted(self.predef_beta_arr, tmp_beta, side='left')
   232                                           
   233     31228      67289.0      2.2      1.2          if idx == len(self.predef_beta_arr):
   234     21489      56282.0      2.6      1.0              beta_arr[k] = self.predef_beta_arr[idx - 1]
   235      9739      61359.0      6.3      1.1          elif idx > 0 and self.predef_beta_arr[idx] - tmp_beta >= tmp_beta - self.predef_beta_arr[idx - 1]:
   236      3748       7307.0      1.9      0.1              beta_arr[k] = self.predef_beta_arr[idx - 1]
   237                                                   else:
   238      5991       9824.0      1.6      0.2              beta_arr[k] = self.predef_beta_arr[idx]
   239                                           
   240     31228      22133.0      0.7      0.4          return para

Total time: 0 s
File: /mnt/raid61/Personal_data/zhangyiming/code/afe/ATS/ats/core.py
Function: mstep_fixed at line 243

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   243                                               @profile
   244                                               def mstep_fixed(self, para, Z, k):
   245                                                   # avoid division by zero
   246                                                   if np.sum(Z[:, k]) < 1e-8:
   247                                                       Z[:, k] += 1e-8
   248                                                       Z = self.norm_z(Z)
   249                                           
   250                                                   para.ws = self.maximize_ws(Z)
   251                                           
   252                                                   return para

Total time: 59.7369 s
File: /mnt/raid61/Personal_data/zhangyiming/code/afe/ATS/ats/core.py
Function: elbo at line 254

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   254                                               @staticmethod
   255                                               @profile
   256                                               def elbo(log_zmat, Z):
   257     31228   59736892.0   1912.9    100.0          return np.add(AtsModel.exp_log_lik(log_zmat, Z), AtsModel.entropy(Z))

Total time: 1.12655 s
File: /mnt/raid61/Personal_data/zhangyiming/code/afe/ATS/ats/core.py
Function: exp_log_lik at line 260

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   260                                               @staticmethod
   261                                               @profile
   262                                               def exp_log_lik(log_zmat, Z):
   263     32478    1126547.0     34.7    100.0          return np.sum(np.multiply(Z[Z != 0], log_zmat[Z != 0]))

Total time: 75.0536 s
File: /mnt/raid61/Personal_data/zhangyiming/code/afe/ATS/ats/core.py
Function: em_algo at line 313

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   313                                               @profile
   314                                               def em_algo(self, para, fixed_inference_flag=False):
   315                                                   u"""
   316                                                   Call mstep and msted_fixed
   317                                                   """
   318      1250       1854.0      1.5      0.0          lb = self.neg_infinite
   319      1250       1400.0      1.1      0.0          lb_arr = []
   320      1250       1341.0      1.1      0.0          N = self.n_frag
   321      1250       1274.0      1.0      0.0          K = para.K
   322                                           
   323      1250     218114.0    174.5      0.3          k_arr = self.gen_k_arr(K, self.nround)
   324                                           
   325      1250       6273.0      5.0      0.0          log_zmat = np.zeros((N, K + 1))
   326      6250       8108.0      1.3      0.0          for k in range(K + 1):
   327      5000     361676.0     72.3      0.5              log_zmat = self.cal_z_k(para, k, log_zmat)
   328                                           
   329     31240      37765.0      1.2      0.1          for i in range(self.nround):
   330                                                       # logger.debug(f'iteration={i + 1}  lb={lb}')
   331                                           
   332                                                       # E-Step
   333     31228    3001746.0     96.1      4.0              log_zmat = self.cal_z_k(para, k_arr[i], log_zmat)
   334                                           
   335     31228    3201615.0    102.5      4.3              Z = self.norm_z(log_zmat)
   336                                           
   337     31228      40472.0      1.3      0.1              if fixed_inference_flag:
   338                                                           para = self.mstep_fixed(para, Z, k_arr[i])
   339                                                       else:
   340     31228    6340772.0    203.0      8.4                  para = self.mstep(para, Z, k_arr[i])
   341                                           
   342     31228   59931795.0   1919.2     79.9              lb_new = self.elbo(log_zmat, Z)
   343     31228      56669.0      1.8      0.1              lb_arr.append(lb_new)
   344                                           
   345     31228    1286463.0     41.2      1.7              if np.isposinf(lb_new) or np.isneginf(lb_new):
   346                                                           lb = Inf
   347                                                           break
   348                                           
   349     31228     387636.0     12.4      0.5              if np.abs(np.subtract(lb_new, lb)) < np.abs(np.multiply(1e-6, lb)):
   350      1238       1421.0      1.1      0.0                  break
   351                                                       else:
   352     29990      33827.0      1.1      0.0                  lb = lb_new
   353                                           
   354                                                   # if i == self.nround:
   355                                                   #     logger.debug(f'Run all {i + 1} iterations. lb={lb}')
   356                                                   # else:
   357                                                   #     logger.debug(f'Converge in  {i + 1} iterations. lb={lb}')
   358                                           
   359      1250      78546.0     62.8      0.1          bic = AtsModel.cal_bic(log_zmat, Z)
   360                                           
   361      1250      23110.0     18.5      0.0          sorted_inds = np.argsort(para.alpha_arr)
   362      1250       3977.0      3.2      0.0          para.alpha_arr = para.alpha_arr[sorted_inds]
   363      1250      13936.0     11.1      0.0          para.alpha_arr = np.rint(para.alpha_arr).astype('int')  # round to nearest integer
   364      1250       2194.0      1.8      0.0          para.beta_arr = para.beta_arr[sorted_inds]
   365      1250       4555.0      3.6      0.0          para.ws[0:K] = para.ws[sorted_inds]
   366                                           
   367      1250       1331.0      1.1      0.0          if not fixed_inference_flag:
   368      1250       1510.0      1.2      0.0              para.title = 'Estimated parameters'
   369      1250       1596.0      1.3      0.0          para.bic = bic
   370      1250       1502.0      1.2      0.0          para.lb_arr = lb_arr
   371                                           
   372      1250       1165.0      0.9      0.0          return para

Total time: 5.9942 s
File: /mnt/raid61/Personal_data/zhangyiming/code/afe/ATS/ats/core.py
Function: sample_alpha at line 374

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   374                                               @profile
   375                                               def sample_alpha(self, n_ats):
   376      1251     203524.0    162.7      3.4          kernel = FFTKDE(kernel = "gaussian", bw='silverman').fit(self.st_arr)
   377      1251      14091.0     11.3      0.2          x_arr = np.arange(-100, self.L + 100)  # extend to include peaks in 0 or L-1
   378      1251    5396753.0   4314.0     90.0          y_arr = kernel.evaluate(x_arr)
   379      1250      85082.0     68.1      1.4          peak_inds, _ = find_peaks(y_arr)
   380      1250       2945.0      2.4      0.0          peaks = x_arr[peak_inds]
   381      1250      41182.0     32.9      0.7          peaks_ws = np.divide(y_arr[peak_inds], np.sum(y_arr[peak_inds]))
   382                                           
   383      1250       2124.0      1.7      0.0          if n_ats <= len(peaks):
   384       820     179977.0    219.5      3.0              return np.random.choice(peaks, size=n_ats, replace=False, p=peaks_ws)
   385                                                   else:
   386       430      47041.0    109.4      0.8              mu = np.random.choice(peaks, size=n_ats - len(peaks), replace=True, p=peaks_ws)
   387       430      10722.0     24.9      0.2              mu = np.sort(np.concatenate((peaks, mu)))
   388       430       8865.0     20.6      0.1              shift = np.rint(np.random.normal(loc=0, scale=5 * self.step_size, size=n_ats))
   389       430       1891.0      4.4      0.0              return mu + shift

Total time: 6.17538 s
File: /mnt/raid61/Personal_data/zhangyiming/code/afe/ATS/ats/core.py
Function: init_para at line 399

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   399                                               @profile
   400                                               def init_para(self, n_ats):
   401      1251    6032914.0   4822.5     97.7          alpha_arr = self.sample_alpha(n_ats)
   402                                           
   403      1250      85032.0     68.0      1.4          beta_arr = np.random.choice(self.predef_beta_arr, size=n_ats, replace=True)
   404      1250      46471.0     37.2      0.8          ws = self.init_ws(n_ats)
   405                                           
   406      1250      10081.0      8.1      0.2          para = Parameters(title='Initial parameters', alpha_arr=alpha_arr, beta_arr=beta_arr, ws=ws, L=self.L)
   407      1250        885.0      0.7      0.0          return para

Total time: 0.000463 s
File: /mnt/raid61/Personal_data/zhangyiming/code/afe/ATS/ats/core.py
Function: rm_component at line 410

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   410                                               @profile
   411                                               def rm_component(self, para):
   412        50        342.0      6.8     73.9          rm_inds = [i for i in range(para.K) if para.ws[i] < self.min_ws]
   413        50         76.0      1.5     16.4          if len(rm_inds) == 0:
   414        50         45.0      0.9      9.7              return para
   415                                           
   416                                                   logger.warn(f'Remove components {rm_inds} with weight less than min_ws={self.min_ws}.')
   417                                                   keep_inds = np.array([i for i in range(para.K) if not para.ws[i] < self.min_ws])
   418                                                   para.alpha_arr = para.alpha_arr[keep_inds]
   419                                                   para.beta_arr = para.beta_arr[keep_inds]
   420                                                   para.K = len(keep_inds)
   421                                                   para.ws = None
   422                                                   para = self.fixed_inference(para)
   423                                                   return para

Total time: 81.7378 s
File: /mnt/raid61/Personal_data/zhangyiming/code/afe/ATS/ats/core.py
Function: em_optim0 at line 425

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   425                                               @profile
   426                                               def em_optim0(self, n_ats):
   427       251        201.0      0.8      0.0          n_trial = 5
   428       251       4679.0     18.6      0.0          lb_arr = np.full(n_trial, self.neg_infinite)
   429       251       1950.0      7.8      0.0          bic_arr = np.full(n_trial, self.pos_infinite)
   430       251        242.0      1.0      0.0          res_list = []
   431                                           
   432      1501       1956.0      1.3      0.0          for i in range(n_trial):
   433      1251    6192082.0   4949.7      7.6              para = self.init_para(n_ats)
   434                                           
   435      1250   75528737.0  60423.0     92.4              res_list.append(self.em_algo(para))
   436                                           
   437      1250       2510.0      2.0      0.0              lb_arr[i] = res_list[i].lb_arr[-1]
   438      1250       1607.0      1.3      0.0              bic_arr[i] = res_list[i].bic
   439                                           
   440       250       3212.0     12.8      0.0          min_ind = np.argmin(bic_arr)
   441       250        255.0      1.0      0.0          res = res_list[min_ind]
   442                                           
   443       250        245.0      1.0      0.0          res.title = 'Estimated Parameters'
   444                                           
   445       250        146.0      0.6      0.0          return res

Total time: 0.010741 s
File: /mnt/raid61/Personal_data/zhangyiming/code/afe/ATS/ats/core.py
Function: get_label at line 447

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   447                                               @profile
   448                                               def get_label(self, para, st_arr=None):
   449        50         62.0      1.2      0.6          if st_arr is None:
   450        50         60.0      1.2      0.6              st_arr = self.st_arr
   451        50         43.0      0.9      0.4          N = len(st_arr)
   452        50         37.0      0.7      0.3          K = para.K
   453        50        293.0      5.9      2.7          log_zmat = np.zeros((N, K + 1), dtype='float')
   454       150        159.0      1.1      1.5          for k in range(K + 1):
   455       100       5841.0     58.4     54.4              log_zmat = self.cal_z_k(para, k, log_zmat)
   456        50       3549.0     71.0     33.0          Z = self.norm_z(log_zmat)
   457        50        661.0     13.2      6.2          label_arr = np.argmax(Z, axis=1)
   458        50         36.0      0.7      0.3          return label_arr

Total time: 81.7725 s
File: /mnt/raid61/Personal_data/zhangyiming/code/afe/ATS/ats/core.py
Function: run at line 460

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   460                                               @profile
   461                                               def run(self) -> Parameters:
   462        51        163.0      3.2      0.0          if not self.st_arr:
   463                                                       return None
   464        51         84.0      1.6      0.0          if self.max_beta < self.step_size:
   465                                                       raise Exception("max_beta=" + str(self.max_beta) + " step_size=" + str(self.step_size) +
   466                                                                       ", max_beta has to be greater than step_size!")
   467                                           
   468        51        856.0     16.8      0.0          self.predef_beta_arr = np.arange(self.step_size, self.max_beta, self.step_size)
   469                                           
   470        51         70.0      1.4      0.0          n_ats_trial = self.n_max_ats - self.n_min_ats + 1
   471        51       1866.0     36.6      0.0          bic_arr = np.full(n_ats_trial, self.pos_infinite)
   472        51         61.0      1.2      0.0          res_list = []
   473                                           
   474        51       1759.0     34.5      0.0          self.unif_log_lik = self.lik_f0(log=True)
   475                                           
   476       301        797.0      2.6      0.0          for i, n_ats in enumerate(range(self.n_max_ats, self.n_min_ats - 1, -1)):
   477       251   81752948.0 325709.0    100.0              res = self.em_optim0(n_ats)
   478       250        309.0      1.2      0.0              res_list.append(res)
   479       250        351.0      1.4      0.0              bic_arr[i] = res.bic
   480                                           
   481        50        348.0      7.0      0.0          min_ind = np.argmin(bic_arr)
   482        50         49.0      1.0      0.0          res = res_list[min_ind]
   483                                           
   484        50       1076.0     21.5      0.0          res = self.rm_component(res)
   485        50      11680.0    233.6      0.0          res.label_arr = self.get_label(res)
   486                                           
   487        50         52.0      1.0      0.0          res.title = f'Final Result'
   488                                           
   489        50         35.0      0.7      0.0          return res

Total time: 53.0552 s
File: test.py
Function: cal_z_k at line 75

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    75                                               @profile
    76                                               def cal_z_k(self, para, k, log_zmat):
    77                                                   # K = len(ws) - 1  # last component is uniform component
    78     27791      27585.0      1.0      0.1          ws = para.ws
    79     27791      18428.0      0.7      0.0          alpha_arr = para.alpha_arr
    80     27791      16861.0      0.6      0.0          beta_arr = para.beta_arr
    81     27791      39596.0      1.4      0.1          if k < para.K:
    82     26540   52897785.0   1993.1     99.7              log_zmat[:, k] = np.log(ws[k]) + self.lik_l_ab(self.st_arr, alpha_arr[k], beta_arr[k], log=True)
    83                                                   else:
    84      1251      11204.0      9.0      0.0              log_zmat[:, k] = np.log(ws[k]) + self.unif_log_lik
    85     27791      43713.0      1.6      0.1          return log_zmat

Total time: 2.38161 s
File: test.py
Function: norm_z at line 88

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    88                                               @staticmethod
    89                                               @profile
    90                                               def norm_z(Z):
    91     22995    1561769.0     67.9     65.6          Z = np.exp(Z - np.max(Z, axis=1, keepdims=True))
    92     22995     802657.0     34.9     33.7          Z = Z / np.sum(Z, axis=1, keepdims=True)
    93     22995      17188.0      0.7      0.7          return Z

Total time: 0.887664 s
File: test.py
Function: maximize_ws at line 96

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    96                                               @profile
    97                                               def maximize_ws(self, Z):
    98     22819     586820.0     25.7     66.1          ws = np.sum(Z, axis=0) / Z.shape[0]
    99     22819      47462.0      2.1      5.3          if ws[-1] > self.max_unif_ws:
   100      8859     229578.0     25.9     25.9              ws[:-1] = (1 - self.max_unif_ws) * ws[:-1] / np.sum(ws[:-1])
   101      8859      11934.0      1.3      1.3              ws[-1] = self.max_unif_ws
   102     22819      11870.0      0.5      1.3          return ws

Total time: 4.67751 s
File: test.py
Function: mstep at line 104

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   104                                               @profile
   105                                               def mstep(self, para, Z, k):
   106     22782      27691.0      1.2      0.6          alpha_arr = para.alpha_arr
   107     22782      19266.0      0.8      0.4          beta_arr = para.beta_arr
   108                                           
   109     22782     431955.0     19.0      9.2          tmp_sumk = np.sum(Z[:, k])
   110                                                   # avoid division by zero
   111     22782      38014.0      1.7      0.8          if tmp_sumk < 1e-8:
   112       128       1479.0     11.6      0.0              Z[:, k] += 1e-8
   113       128       7852.0     61.3      0.2              Z = AtsModel.norm_z(Z)
   114       128       1939.0     15.1      0.0              tmp_sumk = np.sum(Z[:, k])
   115                                           
   116     22782    1074056.0     47.1     23.0          para.ws = self.maximize_ws(Z)
   117                                           
   118     22782    1177142.0     51.7     25.2          alpha_arr[k] = np.sum(Z[:, k] * self.st_arr) / tmp_sumk
   119                                           
   120     22782    1268633.0     55.7     27.1          tmp_beta = math.sqrt(np.sum(Z[:, k] * ((self.st_arr - alpha_arr[k]) ** 2)) / tmp_sumk)
   121                                           
   122     22782     312725.0     13.7      6.7          idx = np.searchsorted(self.predef_beta_arr, tmp_beta, side='left')
   123     22782      54479.0      2.4      1.2          if idx == len(self.predef_beta_arr):
   124      1577       4328.0      2.7      0.1              beta_arr[k] = self.predef_beta_arr[idx - 1]
   125     21205     201524.0      9.5      4.3          elif idx > 0 and self.predef_beta_arr[idx] - tmp_beta >= tmp_beta - self.predef_beta_arr[idx - 1]:
   126      5869      13080.0      2.2      0.3              beta_arr[k] = self.predef_beta_arr[idx - 1]
   127                                                   else:
   128     15336      27331.0      1.8      0.6              beta_arr[k] = self.predef_beta_arr[idx]
   129                                           
   130     22782      16021.0      0.7      0.3          return para

Total time: 0.002399 s
File: test.py
Function: mstep_fixed at line 133

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   133                                               @profile
   134                                               def mstep_fixed(self, para, Z, k):
   135                                                   # avoid division by zero
   136        37        775.0     20.9     32.3          if np.sum(Z[:, k]) < 1e-8:
   137                                                       Z[:, k] += 1e-8
   138                                                       Z = AtsModel.norm_z(Z)
   139                                           
   140        37       1598.0     43.2     66.6          para.ws = self.maximize_ws(Z)
   141                                           
   142        37         26.0      0.7      1.1          return para

Total time: 3.44161 s
File: test.py
Function: elbo at line 144

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   144                                               @staticmethod
   145                                               @profile
   146                                               def elbo(log_zmat, Z):
   147     22819    3421223.0    149.9     99.4          lb = AtsModel.exp_log_lik(log_zmat, Z) + np.sum(stats.entropy(Z, axis=1))
   148     22819      20386.0      0.9      0.6          return lb

Total time: 0.887253 s
File: test.py
Function: exp_log_lik at line 151

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   151                                               @staticmethod
   152                                               @profile
   153                                               def exp_log_lik(log_zmat, Z):
   154     24022     887253.0     36.9    100.0          return np.sum(Z[Z != 0] * log_zmat[Z != 0])

Total time: 0.000424 s
File: test.py
Function: lik_f0 at line 157

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   157                                               @profile
   158                                               def lik_f0(self, log=False):
   159        51         37.0      0.7      8.7          if log:
   160        51        387.0      7.6     91.3              return -math.log(self.L)
   161                                                   else:
   162                                                       return 1 / self.L

Total time: 52.3017 s
File: test.py
Function: lik_l_ab at line 165

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   165                                               @staticmethod
   166                                               @profile
   167                                               def lik_l_ab(l_arr, alpha, beta, log=False):
   168     26540      20102.0      0.8      0.0          if log:
   169     26540   52281564.0   1969.9    100.0              return stats.norm(loc=alpha, scale=beta).logpdf(l_arr)
   170                                                   else:
   171                                                       return stats.norm(loc=alpha, scale=beta).pdf(l_arr)

Total time: 0.249703 s
File: test.py
Function: gen_k_arr at line 174

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   174                                               @staticmethod
   175                                               @profile
   176                                               def gen_k_arr(K, n):
   177      1203       1526.0      1.3      0.6          def _gen(K):
   178                                                       ii = 0
   179                                                       last_ind = -1
   180                                                       arr = np.random.permutation(K)
   181                                                       while True:
   182                                                           if ii % K == 0:
   183                                                               np.random.shuffle(arr)
   184                                                               if arr[0] == last_ind:
   185                                                                   tmpi = np.random.choice(K - 1) + 1
   186                                                                   arr[0], arr[tmpi] = arr[tmpi], arr[0]
   187                                                               ii = 0
   188                                                               last_ind == arr[-1]
   189                                                           yield arr[ii]
   190                                                           ii += 1
   191                                           
   192      1203       1429.0      1.2      0.6          if K == 0 or K == 1:
   193       240       1631.0      6.8      0.7              return np.zeros(n, dtype='int')
   194       963       1231.0      1.3      0.5          ite = _gen(K)
   195       963        794.0      0.8      0.3          res = []
   196     49113      42060.0      0.9     16.8          for _ in range(n):
   197     48150     186260.0      3.9     74.6              res.append(next(ite))
   198       963      14772.0     15.3      5.9          return np.array(res, dtype='int')

Total time: 0.054972 s
File: test.py
Function: cal_bic at line 200

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   200                                               @staticmethod
   201                                               @profile
   202                                               def cal_bic(log_zmat, Z):
   203      1203       1518.0      1.3      2.8          N, K = Z.shape
   204      1203      52560.0     43.7     95.6          res = -2 * AtsModel.exp_log_lik(log_zmat, Z) + (3 * K + 1) * np.log(N)  # the smaller bic, the better model
   205      1203        894.0      0.7      1.6          return res

Total time: 0.113726 s
File: test.py
Function: fixed_inference at line 207

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   207                                               @profile
   208                                               def fixed_inference(self, para):
   209         3        196.0     65.3      0.2          para.ws = self.init_ws(len(para.alpha_arr))
   210         3     113528.0  37842.7     99.8          res = self.em_algo(para, fixed_inference_flag=True)
   211         3          2.0      0.7      0.0          return res

Total time: 65.3167 s
File: test.py
Function: em_algo at line 214

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   214                                               @profile
   215                                               def em_algo(self, para, fixed_inference_flag=False):
   216      1203       2212.0      1.8      0.0          lb = self.neg_infinite
   217      1203       1854.0      1.5      0.0          lb_arr = []
   218      1203       1583.0      1.3      0.0          N = self.n_frag
   219      1203       1530.0      1.3      0.0          K = para.K
   220                                           
   221      1203     364540.0    303.0      0.6          k_arr = self.gen_k_arr(K, self.nround)
   222                                           
   223      1203       6576.0      5.5      0.0          log_zmat = np.zeros((N, K + 1))
   224      6015      10500.0      1.7      0.0          for k in range(K + 1):
   225      4812    7411747.0   1540.3     11.3              log_zmat = self.cal_z_k(para, k, log_zmat)
   226                                           
   227     22914      32631.0      1.4      0.0          for i in range(self.nround):
   228     22819      30268.0      1.3      0.0              if self.debug:
   229                                                           print('iteration=', i + 1, '  lb=', lb)
   230                                           
   231                                                       # E-Step
   232     22819   45724658.0   2003.8     70.0              log_zmat = self.cal_z_k(para, k_arr[i], log_zmat)
   233                                           
   234     22819    2571486.0    112.7      3.9              Z = self.norm_z(log_zmat)
   235                                           
   236     22819      30136.0      1.3      0.0              if fixed_inference_flag:
   237        37       2774.0     75.0      0.0                  para = self.mstep_fixed(para, Z, k_arr[i])
   238                                                       else:
   239     22782    5104995.0    224.1      7.8                  para = self.mstep(para, Z, k_arr[i])
   240                                           
   241     22819    3603830.0    157.9      5.5              lb_new = self.elbo(log_zmat, Z)
   242     22819      39238.0      1.7      0.1              lb_arr.append(lb_new)
   243                                           
   244     22819     223344.0      9.8      0.3              if np.abs(lb_new - lb) < np.abs(1e-6 * lb):
   245      1108       1528.0      1.4      0.0                  break
   246                                                       else:
   247     21711      29597.0      1.4      0.0                  lb = lb_new
   248                                           
   249      1203       1686.0      1.4      0.0          if self.debug:
   250                                                       if i == self.nround:
   251                                                           print(f'Run all {i + 1} iterations. lb={lb}')
   252                                                       else:
   253                                                           print(f'Converge in  {i + 1} iterations. lb={lb}')
   254                                           
   255      1203      64868.0     53.9      0.1          bic = AtsModel.cal_bic(log_zmat, Z)
   256      1203       1721.0      1.4      0.0          if self.debug:
   257                                                       print("bic=", bic)
   258                                                       print('estimated ws:  ', np.around(para.ws, decimals=2))
   259                                                       print("estimated alpha: ", np.around(para.alpha_arr, decimals=2))
   260                                                       print("estimated beta: ", np.around(para.beta_arr, decimals=2))
   261                                           
   262      1203       1681.0      1.4      0.0          if self.debug:
   263                                                       nd = len(lb_arr)
   264                                                       if nd >= 3:
   265                                                           plt.plot(list(range(nd - 3)), lb_arr[3:nd])
   266                                                           plt.show()
   267                                           
   268                                                   # sorted_inds = sorted(range(len(alpha_arr)), key=lambda k: alpha_arr[k])
   269      1203      19596.0     16.3      0.0          sorted_inds = np.argsort(para.alpha_arr)
   270      1203       3984.0      3.3      0.0          para.alpha_arr = para.alpha_arr[sorted_inds]
   271      1203      13151.0     10.9      0.0          para.alpha_arr = np.rint(para.alpha_arr).astype('int')  # round to nearest integer
   272      1203       2418.0      2.0      0.0          para.beta_arr = para.beta_arr[sorted_inds]
   273      1203       4359.0      3.6      0.0          para.ws[0:K] = para.ws[sorted_inds]
   274                                           
   275      1203       1593.0      1.3      0.0          if not fixed_inference_flag:
   276      1200       1754.0      1.5      0.0              para.title = 'Estimated parameters'
   277      1203       1760.0      1.5      0.0          para.bic = bic
   278      1203       1715.0      1.4      0.0          para.lb_arr = lb_arr
   279                                           
   280      1203       1400.0      1.2      0.0          return para

Total time: 19.1083 s
File: test.py
Function: sample_alpha at line 282

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   282                                               @profile
   283                                               def sample_alpha(self, n_ats):
   284                                                   # bw = (5 * self.step_size) / np.std(self.st_arr)
   285                                                   # kernel = stats.gaussian_kde(self.st_arr, bw_method=bw)
   286      1203     698038.0    580.2      3.7          kernel = stats.gaussian_kde(self.st_arr)
   287      1200      12949.0     10.8      0.1          x_arr = np.arange(-100, self.L + 100)  # extend to include peaks in 0 or L-1
   288      1200   18016769.0  15014.0     94.3          y_arr = kernel.pdf(x_arr)
   289      1200      90645.0     75.5      0.5          peak_inds, _ = find_peaks(y_arr)
   290      1200       3195.0      2.7      0.0          peaks = x_arr[peak_inds]
   291      1200      23757.0     19.8      0.1          peaks_ws = y_arr[peak_inds] / sum(y_arr[peak_inds])
   292                                           
   293      1200       2012.0      1.7      0.0          if n_ats <= len(peaks):
   294       535     139834.0    261.4      0.7              return np.random.choice(peaks, size=n_ats, replace=False, p=peaks_ws)
   295                                                   else:
   296       665      84618.0    127.2      0.4              mu = np.random.choice(peaks, size=n_ats - len(peaks), replace=True, p=peaks_ws)
   297       665      18894.0     28.4      0.1              mu = np.sort(np.concatenate((peaks, mu)))
   298       665      14286.0     21.5      0.1              shift = np.rint(np.random.normal(loc=0, scale=5 * self.step_size, size=n_ats))
   299       665       3273.0      4.9      0.0              return mu + shift

Total time: 0.04455 s
File: test.py
Function: init_ws at line 301

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   301                                               @profile
   302                                               def init_ws(self, n_ats):
   303      1203      18162.0     15.1     40.8          ws = np.random.uniform(size=(n_ats + 1))
   304      1203      14536.0     12.1     32.6          ws = ws / sum(ws)
   305      1203       2776.0      2.3      6.2          if ws[-1] > self.max_unif_ws:
   306      1023       7266.0      7.1     16.3              ws[:-1] = ws[:-1] * (1 - self.max_unif_ws)
   307      1023       1118.0      1.1      2.5              ws[-1] = self.max_unif_ws
   308      1203        692.0      0.6      1.6          return ws

Total time: 19.305 s
File: test.py
Function: init_para at line 310

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   310                                               @profile
   311                                               def init_para(self, n_ats):
   312                                                   # alpha_arr = np.random.choice(self.st_arr, size=n_ats, replace=True)
   313      1203   19149379.0  15918.0     99.2          alpha_arr = self.sample_alpha(n_ats)
   314      1200      83787.0     69.8      0.4          beta_arr = np.random.choice(self.predef_beta_arr, size=n_ats, replace=True)
   315      1200      59010.0     49.2      0.3          ws = self.init_ws(n_ats)
   316                                           
   317      1200      10953.0      9.1      0.1          para = Parameters(title='Initial parameters', alpha_arr=alpha_arr, beta_arr=beta_arr, ws=ws, L=self.L)
   318      1200       1089.0      0.9      0.0          if self.debug:
   319                                                       print(para)
   320                                           
   321      1200        789.0      0.7      0.0          return para

Total time: 0.114446 s
File: test.py
Function: rm_component at line 324

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   324                                               @profile
   325                                               def rm_component(self, para):
   326        48        393.0      8.2      0.3          rm_inds = [i for i in range(para.K) if para.ws[i] < self.min_ws]
   327        48         72.0      1.5      0.1          if len(rm_inds) == 0:
   328        45         41.0      0.9      0.0              return para
   329                                           
   330         3         89.0     29.7      0.1          print(f'Remove components {rm_inds} with weight less than min_ws={self.min_ws}.')
   331         3         49.0     16.3      0.0          keep_inds = np.array([i for i in range(para.K) if not para.ws[i] < self.min_ws])
   332         3         12.0      4.0      0.0          para.alpha_arr = para.alpha_arr[keep_inds]
   333         3          7.0      2.3      0.0          para.beta_arr = para.beta_arr[keep_inds]
   334         3          6.0      2.0      0.0          para.K = len(keep_inds)
   335         3          4.0      1.3      0.0          para.ws = None
   336         3     113770.0  37923.3     99.4          para = self.fixed_inference(para)
   337         3          3.0      1.0      0.0          return para

Total time: 85.2241 s
File: test.py
Function: em_optim0 at line 339

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   339                                               @profile
   340                                               def em_optim0(self, n_ats):
   341       243        266.0      1.1      0.0          n_trial = 5
   342       243       4819.0     19.8      0.0          lb_arr = np.full(n_trial, self.neg_infinite)
   343       243       2132.0      8.8      0.0          bic_arr = np.full(n_trial, self.pos_infinite)
   344       243        332.0      1.4      0.0          res_list = list()
   345                                           
   346      1443       1758.0      1.2      0.0          for i in range(n_trial):
   347      1203       1040.0      0.9      0.0              if self.debug:
   348                                                           print('-----------------K=', n_ats, ' | ', 'i_trial=', i + 1, ' | n_trial=', n_trial, ' -------------')
   349      1203   19321442.0  16061.0     22.7              para = self.init_para(n_ats)
   350                                           
   351      1200       1102.0      0.9      0.0              if self.debug:
   352                                                           print(para)
   353                                           
   354      1200   65651691.0  54709.7     77.0              res_list.append(self.em_algo(para))
   355                                           
   356      1200       2394.0      2.0      0.0              lb_arr[i] = res_list[i].lb_arr[-1]
   357      1200       1657.0      1.4      0.0              bic_arr[i] = res_list[i].bic
   358                                           
   359       240       2960.0     12.3      0.0          min_ind = np.argmin(bic_arr)
   360       240        275.0      1.1      0.0          res = res_list[min_ind]
   361                                           
   362       240        257.0      1.1      0.0          res.title = 'Estimated Parameters'
   363       240     231524.0    964.7      0.3          print(res)
   364                                           
   365       240        441.0      1.8      0.0          return res

Total time: 0.233359 s
File: test.py
Function: get_label at line 367

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   367                                               @profile
   368                                               def get_label(self, para, st_arr=None):
   369        48         56.0      1.2      0.0          if st_arr is None:
   370        48         40.0      0.8      0.0              st_arr = self.st_arr
   371        48         49.0      1.0      0.0          N = len(st_arr)
   372        48         43.0      0.9      0.0          K = para.K
   373        48        364.0      7.6      0.2          log_zmat = np.zeros((N, K + 1), dtype='float')
   374       208        264.0      1.3      0.1          for k in range(K + 1):
   375       160     226246.0   1414.0     97.0              log_zmat = self.cal_z_k(para, k, log_zmat)
   376        48       5544.0    115.5      2.4          Z = self.norm_z(log_zmat)
   377        48        716.0     14.9      0.3          label_arr = np.argmax(Z, axis=1)
   378        48         37.0      0.8      0.0          return label_arr

Total time: 85.642 s
File: test.py
Function: run at line 380

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   380                                               @profile
   381                                               def run(self):
   382        51        177.0      3.5      0.0          if self.max_beta < self.step_size:
   383                                                       raise Exception("max_beta=" + str(self.max_beta) + " step_size=" + str(self.step_size) +
   384                                                                       ", max_beta has to be greater than step_size!")
   385                                           
   386        51        918.0     18.0      0.0          self.predef_beta_arr = np.arange(self.step_size, self.max_beta, self.step_size)
   387                                           
   388        51         82.0      1.6      0.0          n_ats_trial = self.n_max_ats - self.n_min_ats + 1
   389        51       1978.0     38.8      0.0          bic_arr = np.full(n_ats_trial, self.pos_infinite)
   390        51         78.0      1.5      0.0          res_list = list()
   391                                           
   392        51       1024.0     20.1      0.0          self.unif_log_lik = self.lik_f0(log=True)
   393                                           
   394       291        724.0      2.5      0.0          for i, n_ats in enumerate(range(self.n_max_ats, self.n_min_ats - 1, -1)):
   395                                                       # print()
   396                                                       # print(20 * '*' + ' k = ' + str(n_ats) + ' ' + 20 * '*')
   397       243   85243518.0 350796.4     99.5              res = self.em_optim0(n_ats)
   398       240        455.0      1.9      0.0              res_list.append(res)
   399       240        561.0      2.3      0.0              bic_arr[i] = res.bic
   400                                           
   401        48        607.0     12.6      0.0          min_ind = np.argmin(bic_arr)
   402        48         66.0      1.4      0.0          res = res_list[min_ind]
   403                                           
   404        48     115118.0   2398.3      0.1          res = self.rm_component(res)
   405        48     234523.0   4885.9      0.3          res.label_arr = self.get_label(res)
   406                                           
   407        48         58.0      1.2      0.0          res.title = f'Final Result'
   408        48      42044.0    875.9      0.0          print(res)
   409                                           
   410        48         98.0      2.0      0.0          return res

